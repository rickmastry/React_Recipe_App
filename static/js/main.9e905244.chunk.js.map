{"version":3,"sources":["components/Recipe.js","components/RecipeSearch.js","components/RecipeList.js","config.js","components/RecipeDetails.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","_this$props$recipe","this","props","recipe","image_url","title","source_url","publisher","recipe_id","handleDetails","react_default","a","createElement","Fragment","className","src","style","height","alt","substring","type","onClick","href","target","rel","Component","RecipeSearch","_this$props","value","handleSubmit","handleChange","onSubmit","htmlFor","name","placeholder","onChange","RecipeList","recipes","error","RecipeSearch_RecipeSearch","map","Recipe_Recipe","key","proxy","RecipeDetails","state","id","url","fetch","data","json","jsonData","setState","console","log","_context","t0","_this$state$recipe","publisher_url","ingredients","handleIndex","item","index","App","concat","base_url","pageIndex","search","query","displayPage","RecipeList_RecipeList","_this","RecipeDetails_RecipeDetails","details_id","e","preventDefault","_this$state","getRecipes","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e905244.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Recipe extends Component {\r\n  render() {\r\n      const{\r\n          image_url,\r\n          title,\r\n          source_url,\r\n          publisher,\r\n          recipe_id\r\n      } = this.props.recipe;\r\n    const {handleDetails} = this.props;\r\n    return (\r\n      <React.Fragment>\r\n         <div className=\"col-10 mx-auto col-md-6 col-lg-4 my-3\">\r\n          <div className=\"card\">\r\n            <img src={image_url} className=\"img-card-top\" style={{height:\"14rem\"}} alt=\"recipe\"/>\r\n            <div className=\"card-body text-capitalize\">\r\n             <h6>{title.substring(0,25)}...</h6>\r\n             <h6 className=\"text-warning text-slanted\">\r\n              provided by {publisher}\r\n             </h6>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n            <button type=\"buttom\" className=\"btn btn-primary text-capitalize\" onClick={()=>handleDetails(0, recipe_id)}>details</button>\r\n            <a href={source_url} className=\"btn btn-success mx-2 text-capitalize\" target=\"_blank\" rel=\"noopener noreferrer\">recipe url</a>\r\n            </div>\r\n          </div>\r\n         </div>\r\n\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class RecipeSearch extends Component {\r\n  render() {\r\n      const {value, handleSubmit, handleChange} = this.props\r\n    return (\r\n     <React.Fragment>\r\n        <div className=\"container\">\r\n        <div className=\"row\">\r\n        <div className=\"col-10 mx-auto col-md-8 my-5 text-center\">\r\n        <h1 className=\"text-slanted text-capitalize\">search for recipe with{\" \"}<strong className=\"text-danger\">Mastry Media</strong></h1>\r\n        <form className=\"mt-4\" onSubmit={handleSubmit}>\r\n        <label htmlFor=\"search\" className=\"text-capitalize\">\r\n           type recipes seperated by a comma\r\n        </label>\r\n        <div className=\"input-group\">\r\n        <input \r\n            type=\"text\" \r\n            name=\"search\" \r\n            placeholder=\"search recipes here...\" \r\n            className=\"form-control\" \r\n            value={value} \r\n            onChange={handleChange}\r\n        />\r\n        <div className=\"input-group-append\">\r\n        <button type=\"submit\" className=\"input-group-text bg-primary text-white\"><i className=\"fas fa-search\"></i>\r\n        </button>\r\n        </div>\r\n        \r\n        </div>\r\n        \r\n        </form>\r\n        \r\n        </div>\r\n        \r\n        </div>\r\n        </div>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport Recipe from './Recipe';\r\nimport RecipeSearch from './RecipeSearch';\r\n\r\nexport default class RecipeList extends Component {\r\n   \r\n  render() {\r\n    const {recipes, handleDetails, value, handleSubmit, handleChange, error} = this.props;\r\n    return (\r\n     <React.Fragment> \r\n        <RecipeSearch value={value} handleChange={handleChange} handleSubmit={handleSubmit}/>\r\n           <div className=\"container my-5\">\r\n           {/*title*/}\r\n           <div className=\"row\">\r\n           <div className=\"col-10 mx-auto col-md-6 text-center text-uppercase mb-3\">\r\n           <h1 className=\"text-slanted\">Recipe List</h1>\r\n           </div>\r\n           </div>\r\n            {/*end of title*/}\r\n            <div className=\"row\">\r\n            {error ? (\r\n                <h1 className=\"text-danger text-center\">{error}\r\n                </h1> \r\n                ): (\r\n                    recipes.map(recipe =>{\r\n                      return(\r\n                        <Recipe\r\n                          key={recipe.recipe_id}\r\n                          recipe={recipe} \r\n                          handleDetails={handleDetails}\r\n                        />\r\n                      )\r\n                  }) \r\n                \r\n            )}\r\n              \r\n              \r\n            </div>\r\n           </div>\r\n        \r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n","export const proxy = 'https://cors-anywhere.herokuapp.com/';\r\nexport const key = '';\r\nexport const keyys = 'cc066a48599ff5cd3c3c06699f0cf0c3';\r\n//03cbff2c53d90523683ebf31581953d6;\r\n//cc066a48599ff5cd3c3c06699f0cf0c3","import React, { Component } from 'react';\r\nimport {recipe} from \"../tempDetails\";\r\nimport {key, proxy} from '../config';\r\n\r\n\r\nexport default class RecipeDetails extends Component {\r\n   /* constructor(props){\r\n        super(props)\r\n\r\n        this.state = {\r\n            recipe: recipe,\r\n            url: `${proxy}http://food2fork.com/api/get?key=${key}&rId=${this.props.id}`\r\n        }\r\n    }\r\n   \r\n\r\n  async componentDidMount(){\r\n       try{\r\n      const data = await fetch(this.state.url);\r\n      const jsonData = await data.json();\r\n      this.setState({\r\n        recipe:jsonData.recipe\r\n      })\r\n    } catch(error){\r\n      console.log(error);\r\n    }\r\n}\r\n    */\r\n \r\n  state= {\r\n      recipe:[]\r\n  }\r\n\r\n  async componentDidMount(){\r\n      const id = this.props.id;\r\n      const url = `${proxy}https://recipesapi.herokuapp.com/api/get?key=${key}&rId=${id}`;\r\n      try{\r\n        const data = await fetch(url);\r\n        const jsonData = await data.json();\r\n    \r\n        this.setState((state, props) => {\r\n            return {\r\n                recipe: jsonData.recipe\r\n                \r\n            }\r\n            \r\n        }, ()=>{});\r\n      } catch(error){\r\n       \r\n        console.log(error);\r\n      }\r\n      \r\n  }\r\n    \r\n  \r\n  render() {\r\n      const{image_url,publisher,publisher_url,source_url,title,ingredients}=this.state.recipe;\r\n      const{handleIndex} = this.props\r\n      console.log(this.state.recipe)\r\n      \r\n    return (\r\n     <React.Fragment>\r\n       <div className=\"container\">\r\n        <div className=\"row\">\r\n         <div className=\"col-10 mx-auto col-md-6 my-3\">\r\n         <button type=\"button\" className=\"btn btn-warning mb-5 text-capitalize\" onClick={() => handleIndex(1)}>back to recipe list</button>\r\n         <img src={image_url} className=\"d-block w-100\" alt=\"recipe\"/>\r\n        </div>\r\n        {/*details section*/}\r\n        <div className=\"col-10 mx-auto col-md my-3\">\r\n        <h6 className=\"text-uppercase\">{title}</h6>\r\n        <h6 className=\"text-warning text-caplitalize text-slanted\">provided by {publisher}</h6>\r\n        <a href={publisher_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-primary mt-2 text-capitalize\">publisher webpage</a>\r\n        <a href={source_url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn btn-success mt-2 mx-3 text-capitalize\">recipe url</a>\r\n        <ul className=\"list-group mt-4\">\r\n        <h2 className=\"mt-3 mb-4\">Ingredients</h2>\r\n        {\r\n            ingredients && ingredients.map((item,index) => {\r\n              return(\r\n                  <li key={index} className=\"list-group-item text-slanted\">\r\n                  {item}\r\n                  </li>\r\n              )\r\n          })\r\n        }\r\n         </ul>\r\n        </div>\r\n        \r\n        </div>\r\n        </div>\r\n     </React.Fragment>\r\n    )\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport \"./App.css\";\r\nimport {recipes} from './tempList';\r\nimport RecipeList from './components/RecipeList';\r\nimport RecipeDetails from './components/RecipeDetails';\r\nimport {key, proxy} from './config';\r\n\r\nclass App extends Component {\r\n  state ={\r\n    recipes: [],\r\n    url: `${proxy}https://recipesapi.herokuapp.com/api/search?key=${key}`,\r\n    base_url: `${proxy}https://recipesapi.herokuapp.com/api/search?key=${key}`,\r\n    pageIndex: 1,\r\n    search: '',\r\n    query: '&q=',\r\n    error: ''\r\n  };\r\n\r\n  async getRecipes(){\r\n    try{\r\n      const data = await fetch(this.state.url);\r\n      const jsonData = await data.json();\r\n      if(jsonData.recipes.length === 0){\r\n        this.setState(()=>{\r\n          return {error:'sorry, but your search did not return any results'}\r\n        })\r\n      }else{\r\n        this.setState(()=>{\r\n          return {recipes:jsonData.recipes}\r\n          \r\n        })\r\n      }\r\n    \r\n    } catch(error){\r\n      console.log(error);\r\n    }\r\n \r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getRecipes();\r\n  }\r\n\r\n  displayPage = (index) => {\r\n    switch(index) {\r\n      default:\r\n      case 1:\r\n      return(  <RecipeList  \r\n        recipes={this.state.recipes} \r\n        handleDetails={this.handleDetails} \r\n        value={this.state.search}\r\n        handleChange={this.handleChange}\r\n        handleSubmit={this.handleSubmit}\r\n        error={this.state.error}\r\n        />)\r\n      case 0: \r\n      return ( <RecipeDetails id={this.state.details_id} handleIndex={this.handleIndex}/>)\r\n    }\r\n  }\r\n\r\n  handleIndex = index => {\r\n    this.setState({\r\n      pageIndex: index\r\n    })\r\n  }\r\n\r\n  handleDetails = (index, id) => {\r\n    this.setState({\r\n      pageIndex: index,\r\n      details_id: id\r\n    })\r\n  };\r\n\r\n  handleChange = (e)=> {\r\n    this.setState({\r\n      search:e.target.value\r\n    },()=> {\r\n      console.log(this.state.search)\r\n    })\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const{base_url,query,search} = this.state;\r\n    this.setState(()=>{\r\n      return{url:`${base_url}${query}${search}`,search:\"\"}\r\n    },()=>{\r\n      this.getRecipes();\r\n    })\r\n  };\r\n\r\n  render(){\r\n   // console.log(this.state.recipes)\r\n    return (\r\n      <React.Fragment>\r\n       {this.displayPage(this.state.pageIndex)}\r\n       \r\n    </React.Fragment>\r\n    );\r\n   \r\n  }\r\n \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}